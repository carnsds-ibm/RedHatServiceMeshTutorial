{"ast":null,"code":"import React from\"react\";import{Content}from\"carbon-components-react/lib/components/UIShell\";import Header from\"../header/BasicHeader\";import{UnorderedList,ListItem}from\"carbon-components-react\";import BodyText from\"../text/BodyText\";import CodeSnip from\"../util/CustomCodeSnip\";import Image from'../util/Image';// == ASSETTS ==\nimport IMG1 from'../../assets/pg4-1.png';import IMG2 from'../../assets/pg4-2.png';import IMG3 from'../../assets/pg4-3.png';var FourthPage=function FourthPage(){return/*#__PURE__*/React.createElement(Content,null,/*#__PURE__*/React.createElement(Header,{text:\"Installation\"}),/*#__PURE__*/React.createElement(UnorderedList,null,/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"The Fun Part\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Here we'll just be leveraging those configurations and service account we made in the previous steps and deploying our application using ocp native DeploymentConfigs.\"+\" At the end, we should have a working application, yay!\"}),/*#__PURE__*/React.createElement(BodyText,{B:true,SM:true,text:\"** Again, please ensure the MESH_PROJ and APP_PROJ environment variables are still set. **\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"echo $APP_PROJ\\necho $MESH_PROJ\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Let's begin by first ensuring we are on our application project.\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:\"oc project $APP_PROJ\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Deploying the Database (MongoDB)\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"We'll create and deploy the following file in order to standup the database in authentication mode. Also note the * sidecar.istio.io/inject: \\\"true\\\" * annotation in the pod, all the following deployments will have the\"+\" same annotation for istio injection, you can enable auto injection in the Service Mesh Control Plane, but we are doing it manually just because. This first deploy config is called mongo-deploy and all the subsequent deployments will have similar naming convention, also just because.\"+\" Note: we are using an empty dir for the DB, but feel free to change to a PVC if you want, this is obviously just a demo application though (same will apply to redis).\"+\" Also notice the version label, this is import for distinguising where traffic goes from the destination rules.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > mongo_deploy_conf.yaml\\nkind: DeploymentConfig\\napiVersion: apps.openshift.io/v1\\nmetadata:\\n  name: mongo-deploy\\n  labels:\\n    app: mongo-deploy\\n    version: v1\\nspec:\\n  strategy:\\n    type: Rolling\\n    rollingParams:\\n      updatePeriodSeconds: 1\\n      intervalSeconds: 1\\n      timeoutSeconds: 600\\n      maxUnavailable: 25%\\n      maxSurge: 25%\\n    resources: {}\\n    activeDeadlineSeconds: 21600\\n  triggers:\\n    - type: ConfigChange\\n  replicas: 1\\n  selector:\\n    app: mongo-deploy\\n    version: v1\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      labels:\\n        app: mongo-deploy\\n        tier: backend\\n        version: v1\\n    spec:\\n      containers:\\n        - image: mongo:3.6.17\\n          name: mongo\\n          env:\\n          - name: MONGO_INITDB_ROOT_USERNAME\\n            valueFrom:\\n              secretKeyRef:\\n                name: void-secret\\n                key: DB_ADMINUSER\\n          - name: MONGO_INITDB_ROOT_PASSWORD\\n            valueFrom:\\n              secretKeyRef:\\n                name: void-secret\\n                key: DB_ADMINPWD\\n          args: [ \\\"--auth\\\" ]\\n          ports:\\n          - containerPort: 27017\\n          volumeMounts:\\n          - name: data\\n            mountPath: /data/db\\n      volumes:\\n        - name: data\\n          emptyDir: {}\\n          securityContext:\\n            capabilities:\\n            privileged: true\\n            readOnlyRootFilesystem: false\\n            allowPrivilegeEscalation: true\\n      serviceAccountName: general\\n      serviceAccount: general\\nEOF\\noc apply -f mongo_deploy_conf.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Next we'll add a service to expose our DB deployment, normal ocp/kubernetes stuff.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > mongo_service.yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  labels:\\n    app: mongo-deploy\\n  name: mongo-service\\nspec:\\n  ports:\\n  - port: 8081\\n    protocol: TCP\\n    targetPort: 27017\\n  selector:\\n    app: mongo-deploy\\n  type: ClusterIP\\nEOF\\noc apply -f mongo_service.yaml\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Deploying the Redis instance\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"The following command to copy will create the redis deployment with the istio injection annotation as well.\"+\"We also use an empty dir here as well, but again, feel free to use a PVC.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > redis_deploy_conf.yaml\\nkind: DeploymentConfig\\napiVersion: apps.openshift.io/v1\\nmetadata:\\n  labels:\\n    app: redis-deploy\\n    version: v1\\n  name: redis-deploy\\nspec:\\n  strategy:\\n    type: Rolling\\n    rollingParams:\\n      updatePeriodSeconds: 1\\n      intervalSeconds: 1\\n      timeoutSeconds: 600\\n      maxUnavailable: 25%\\n      maxSurge: 25%\\n    activeDeadlineSeconds: 21600\\n  triggers:\\n    - type: ConfigChange\\n  replicas: 1\\n  selector:\\n    app: redis-deploy\\n    version: v1\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      labels:\\n        app: redis-deploy\\n        tier: backend\\n        version: v1\\n    spec:\\n      serviceAccount: general\\n      serviceAccountName: general\\n      containers:\\n      - image: redis:alpine\\n        name: redis\\n        ports:\\n        - containerPort: 6379\\n        volumeMounts:\\n        - name: data\\n          mountPath: /data\\n      volumes:\\n      - name: data\\n        emptyDir: {}\\nEOF\\noc apply -f redis_deploy_conf.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Now add a service to expose our redis deployment.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > redis_service.yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  labels:\\n    app: redis-deploy\\n  name: redis-service\\nspec:\\n  ports:\\n  - port: 6379\\n    protocol: TCP\\n    targetPort: 6379\\n  selector:\\n    app: redis-deploy\\n  type: ClusterIP\\nEOF\\noc apply -f redis_service.yaml\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Deploying the Backend - Open Liberty\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"This deployment deploys the Java backend written with MicroProfile.\\n            This leverages the configmap considerably and is responsible for the communication between redis, MongoDB and the frontend. However, we will have to make two deployments of this to exemplify canary testing.\\n            The first one will have the 'version: v1' label.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > backend_deploy1.yaml\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  labels:\\n    app: backend-deploy\\n    version: v1\\n  name: backend-deploy\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: backend-deploy\\n      version: v1\\n  strategy:\\n    rollingUpdate:\\n      maxSurge: 25%\\n      maxUnavailable: 25%\\n    type: RollingUpdate\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      creationTimestamp: null\\n      labels:\\n        app: backend-deploy\\n        version: v1\\n        tier: backend\\n    spec:\\n      containers:\\n      - env:\\n        - name: DB_ADMINUSER\\n          valueFrom:\\n            secretKeyRef:\\n              key: DB_ADMINUSER\\n              name: void-secret\\n        - name: DB_ADMINPWD\\n          valueFrom:\\n            secretKeyRef:\\n              key: DB_ADMINPWD\\n              name: void-secret\\n        - name: DB_HOST\\n          valueFrom:\\n            configMapKeyRef:\\n              key: DB_HOST\\n              name: void-config\\n        - name: DB_PORT\\n          valueFrom:\\n            configMapKeyRef:\\n              key: DB_PORT\\n              name: void-config\\n        - name: R_HOST\\n          valueFrom:\\n            configMapKeyRef:\\n              key: R_HOST\\n              name: void-config\\n        - name: R_PORT\\n          valueFrom:\\n            configMapKeyRef:\\n              key: R_PORT\\n              name: void-config\\n        image: dennismila/backend-void:1.2\\n        imagePullPolicy: IfNotPresent\\n        name: void-backend\\n        ports:\\n        - containerPort: 9080\\n        resources:\\n          requests:\\n             cpu: 200m\\nEOF\\noc apply -f backend_deploy1.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"The next will have version v2 and act as one of our \\\"canary\\\" test subjects as if it was a newer version when in reality, it is simply the same. It is nothing but a lie, shhh.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > backend_deploy2.yaml\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  labels:\\n    app: backend-deploy\\n    version: v2\\n  name: backend-deploy-canary\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: backend-deploy\\n      version: v2\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      labels:\\n        app: backend-deploy\\n        tier: backend\\n        version: v2\\n    spec:\\n      containers:\\n      - image: dennismila/backend-void:1.2\\n        name: void-backend\\n        ports:\\n        - containerPort: 9080\\n        env:\\n        - name: DB_ADMINUSER\\n          valueFrom:\\n            secretKeyRef:\\n              name: void-secret\\n              key: DB_ADMINUSER\\n        - name: DB_ADMINPWD\\n          valueFrom:\\n            secretKeyRef:\\n              name: void-secret\\n              key: DB_ADMINPWD\\n        - name: DB_HOST\\n          valueFrom:\\n            configMapKeyRef:\\n              name: void-config\\n              key: DB_HOST\\n        - name: DB_PORT \\n          valueFrom:\\n            configMapKeyRef:\\n              name: void-config\\n              key: DB_PORT\\n        - name: R_HOST\\n          valueFrom:\\n            configMapKeyRef:\\n              name: void-config\\n              key: R_HOST\\n        - name: R_PORT\\n          valueFrom:\\n            configMapKeyRef:\\n              name: void-config\\n              key: R_PORT\\nEOF\\noc apply -f backend_deploy2.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Now we'll need to add only one service as the istio routing rules and envoy proxies (sidecars), will handle the rest.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > backend_service.yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  labels:\\n    app: backend-deploy\\n  name: backend-service\\nspec:\\n  ports:\\n  - port: 80\\n    name: http\\n    protocol: TCP\\n    targetPort: 9080\\n  selector:\\n    app: backend-deploy\\nEOF\\noc apply -f backend_service.yaml\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Deploying the Frontend - ReactJS on Nginx\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"This, faithful readers, is the final deployment necessary. This one will also have \\\"two\\\" versions for canary testing with the weights specified back in the virtual services.\\n            Without further ado, let's go ahead and deploy them!\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > frontend_deploy1.yaml\\nkind: DeploymentConfig\\napiVersion: apps.openshift.io/v1\\nmetadata:\\n  name: frontend-deploy\\n  labels:\\n    app: frontend-deploy\\n    version: v1\\nspec:\\n  strategy:\\n    type: Rolling\\n    rollingParams:\\n      updatePeriodSeconds: 1\\n      intervalSeconds: 1\\n      timeoutSeconds: 600\\n      maxUnavailable: 25%\\n      maxSurge: 25%\\n    resources: {}\\n    activeDeadlineSeconds: 21600\\n  triggers:\\n    - type: ConfigChange\\n  replicas: 1\\n  selector:\\n    app: frontend-deploy\\n    version: v1\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      labels:\\n        app: frontend-deploy\\n        version: v1\\n    spec:\\n      containers:\\n        - name: void-frontend\\n          ports:\\n            - containerPort: 80\\n              protocol: TCP\\n          resources:\\n            requests:\\n             cpu: 125m\\n          env:\\n            - name: BACKEND_URL\\n              valueFrom:\\n                configMapKeyRef:\\n                  key: BACKEND_URL\\n                  name: void-config\\n          securityContext:\\n            capabilities:\\n            privileged: true\\n            readOnlyRootFilesystem: false\\n            allowPrivilegeEscalation: true\\n          imagePullPolicy: Always\\n          terminationMessagePolicy: File\\n          image: carnsds/frontend-void:1.3\\n      restartPolicy: Always\\n      terminationGracePeriodSeconds: 30\\n      dnsPolicy: ClusterFirst\\n      serviceAccountName: general\\n      serviceAccount: general\\nEOF\\noc apply -f frontend_deploy1.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"And for version two:\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > frontend_deploy2.yaml\\nkind: DeploymentConfig\\napiVersion: apps.openshift.io/v1\\nmetadata:\\n  name: frontend-deploy-canary\\n  labels:\\n    app: frontend-deploy\\n    version: v2\\nspec:\\n  strategy:\\n    type: Rolling\\n    rollingParams:\\n      updatePeriodSeconds: 1\\n      intervalSeconds: 1\\n      timeoutSeconds: 600\\n      maxUnavailable: 25%\\n      maxSurge: 25%\\n    resources: {}\\n    activeDeadlineSeconds: 21600\\n  triggers:\\n    - type: ConfigChange\\n  replicas: 1\\n  selector:\\n    app: frontend-deploy\\n    version: v2\\n  template:\\n    metadata:\\n      annotations:\\n        sidecar.istio.io/inject: \\\"true\\\"\\n      labels:\\n        app: frontend-deploy\\n        version: v2\\n    spec:\\n      containers:\\n        - name: void-frontend\\n          ports:\\n            - containerPort: 80\\n              protocol: TCP\\n          resources:\\n            requests:\\n             cpu: 125m\\n          env:\\n            - name: BACKEND_URL\\n              valueFrom:\\n                configMapKeyRef:\\n                  key: BACKEND_URL\\n                  name: void-config\\n          securityContext:\\n            capabilities:\\n            privileged: true\\n            readOnlyRootFilesystem: false\\n            allowPrivilegeEscalation: true\\n          imagePullPolicy: Always\\n          terminationMessagePolicy: File\\n          image: carnsds/frontend-void:1.3\\n      restartPolicy: Always\\n      terminationGracePeriodSeconds: 30\\n      dnsPolicy: ClusterFirst\\n      serviceAccountName: general\\n      serviceAccount: general\\nEOF\\noc apply -f frontend_deploy2.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Note the name of the following service's port, a name is necessary for proper istio configuration and we only named the backend and frontend ports, but you could definitely play around with other names.\\n          Now, the final service to top it off:\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > frontend_service.yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  labels:\\n    app: frontend-deploy\\n    service: frontend-service\\n  name: frontend-service\\nspec:\\n  ports:\\n  - name: http\\n    port: 80\\n    protocol: TCP\\n    targetPort: 80\\n  selector:\\n    app: frontend-deploy\\n  type: ClusterIP\\nEOF\\noc apply -f frontend_service.yaml\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Now to see that the application is running!\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Run the following command and grab the istio-ingressgate-way route to checkout your newly deployed app in the browser!\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:\"oc get route -n $MESH_PROJ\"}),/*#__PURE__*/React.createElement(Image,{path:IMG1,text:\"how to grab the right ingress route\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Copy that text and navigate there in the browser, alternatively you can grab the route within the cluster in the mesh project.\"}),/*#__PURE__*/React.createElement(Image,{path:IMG2,text:\"Working App proof.\"}),/*#__PURE__*/React.createElement(BodyText,{B:true,SM:true,text:\"If you see similar to the above and are able to create and account and mess around, then congratulate yourself, you've got it working properly!\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Also if you want to check and see if it's setup properly without going into the browser you can run the following command and just check that each running pod has 2 containers. This would indicate that the istio sidecar injection (envoy proxy) was successful.\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:\"oc get pods\"}),/*#__PURE__*/React.createElement(Image,{path:IMG3,text:\"Proof 2 of working application.\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Summary\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"In this step, we've deployed our application and added istio injection annotations to each Pod in our DeploymentConfigs and Deployments and also added services to expose them internally in the cluster.\\n            Because of the virtual services we setup, our ingress gateway know's which envoy proxies (istio sidecars) on the pods to direct traffic to and we can officially start taking a look at that traffic data in the next section.\\n            ** Note: There is a reason we used Deployments for one and DeploymentConfigs for the different services that we will run into later.\"}))));};export default FourthPage;","map":{"version":3,"sources":["/Users/dilloncarns/Projects/redhatservicemeshtutorial/src/components/pages/FourthPage.js"],"names":["React","Content","Header","UnorderedList","ListItem","BodyText","CodeSnip","Image","IMG1","IMG2","IMG3","FourthPage"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Content } from \"carbon-components-react/lib/components/UIShell\";\nimport Header from \"../header/BasicHeader\";\nimport { UnorderedList, ListItem } from \"carbon-components-react\";\nimport BodyText from \"../text/BodyText\";\nimport CodeSnip from \"../util/CustomCodeSnip\";\nimport Image from '../util/Image';\n\n// == ASSETTS ==\nimport IMG1 from '../../assets/pg4-1.png';\nimport IMG2 from '../../assets/pg4-2.png';\nimport IMG3 from '../../assets/pg4-3.png';\n\nconst FourthPage = () => (\n  <Content>\n      <Header text=\"Installation\"/>\n      <UnorderedList>\n        <ListItem>\n          <BodyText text=\"The Fun Part\" />\n          <BodyText SM text={\"Here we'll just be leveraging those configurations and service account we made in the previous steps and deploying our application using ocp native DeploymentConfigs.\"\n        + \" At the end, we should have a working application, yay!\"} />\n          <BodyText B SM text=\"** Again, please ensure the MESH_PROJ and APP_PROJ environment variables are still set. **\" />\n          <CodeSnip M text={\n`echo $APP_PROJ\necho $MESH_PROJ`} />\n          <BodyText SM text=\"Let's begin by first ensuring we are on our application project.\" />\n          <CodeSnip text={`oc project $APP_PROJ`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Deploying the Database (MongoDB)\" />\n          <BodyText SM text={\"We'll create and deploy the following file in order to standup the database in authentication mode. Also note the * sidecar.istio.io/inject: \\\"true\\\" * annotation in the pod, all the following deployments will have the\"\n            + \" same annotation for istio injection, you can enable auto injection in the Service Mesh Control Plane, but we are doing it manually just because. This first deploy config is called mongo-deploy and all the subsequent deployments will have similar naming convention, also just because.\"\n            + \" Note: we are using an empty dir for the DB, but feel free to change to a PVC if you want, this is obviously just a demo application though (same will apply to redis).\"\n            + \" Also notice the version label, this is import for distinguising where traffic goes from the destination rules.\"} />\n          <CodeSnip M text={\n`cat << EOF > mongo_deploy_conf.yaml\nkind: DeploymentConfig\napiVersion: apps.openshift.io/v1\nmetadata:\n  name: mongo-deploy\n  labels:\n    app: mongo-deploy\n    version: v1\nspec:\n  strategy:\n    type: Rolling\n    rollingParams:\n      updatePeriodSeconds: 1\n      intervalSeconds: 1\n      timeoutSeconds: 600\n      maxUnavailable: 25%\n      maxSurge: 25%\n    resources: {}\n    activeDeadlineSeconds: 21600\n  triggers:\n    - type: ConfigChange\n  replicas: 1\n  selector:\n    app: mongo-deploy\n    version: v1\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      labels:\n        app: mongo-deploy\n        tier: backend\n        version: v1\n    spec:\n      containers:\n        - image: mongo:3.6.17\n          name: mongo\n          env:\n          - name: MONGO_INITDB_ROOT_USERNAME\n            valueFrom:\n              secretKeyRef:\n                name: void-secret\n                key: DB_ADMINUSER\n          - name: MONGO_INITDB_ROOT_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: void-secret\n                key: DB_ADMINPWD\n          args: [ \"--auth\" ]\n          ports:\n          - containerPort: 27017\n          volumeMounts:\n          - name: data\n            mountPath: /data/db\n      volumes:\n        - name: data\n          emptyDir: {}\n          securityContext:\n            capabilities:\n            privileged: true\n            readOnlyRootFilesystem: false\n            allowPrivilegeEscalation: true\n      serviceAccountName: general\n      serviceAccount: general\nEOF\noc apply -f mongo_deploy_conf.yaml`} />\n          <BodyText SM text={`Next we'll add a service to expose our DB deployment, normal ocp/kubernetes stuff.`} />\n          <CodeSnip M text={\n`cat << EOF > mongo_service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: mongo-deploy\n  name: mongo-service\nspec:\n  ports:\n  - port: 8081\n    protocol: TCP\n    targetPort: 27017\n  selector:\n    app: mongo-deploy\n  type: ClusterIP\nEOF\noc apply -f mongo_service.yaml`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Deploying the Redis instance\"/>\n          <BodyText SM text={\"The following command to copy will create the redis deployment with the istio injection annotation as well.\"\n            + \"We also use an empty dir here as well, but again, feel free to use a PVC.\"} />\n          <CodeSnip M text={\n`cat << EOF > redis_deploy_conf.yaml\nkind: DeploymentConfig\napiVersion: apps.openshift.io/v1\nmetadata:\n  labels:\n    app: redis-deploy\n    version: v1\n  name: redis-deploy\nspec:\n  strategy:\n    type: Rolling\n    rollingParams:\n      updatePeriodSeconds: 1\n      intervalSeconds: 1\n      timeoutSeconds: 600\n      maxUnavailable: 25%\n      maxSurge: 25%\n    activeDeadlineSeconds: 21600\n  triggers:\n    - type: ConfigChange\n  replicas: 1\n  selector:\n    app: redis-deploy\n    version: v1\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      labels:\n        app: redis-deploy\n        tier: backend\n        version: v1\n    spec:\n      serviceAccount: general\n      serviceAccountName: general\n      containers:\n      - image: redis:alpine\n        name: redis\n        ports:\n        - containerPort: 6379\n        volumeMounts:\n        - name: data\n          mountPath: /data\n      volumes:\n      - name: data\n        emptyDir: {}\nEOF\noc apply -f redis_deploy_conf.yaml`} />\n          <BodyText SM text={`Now add a service to expose our redis deployment.`} />\n          <CodeSnip M text={\n`cat << EOF > redis_service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-deploy\n  name: redis-service\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP\n    targetPort: 6379\n  selector:\n    app: redis-deploy\n  type: ClusterIP\nEOF\noc apply -f redis_service.yaml`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Deploying the Backend - Open Liberty\"/>\n          <BodyText SM text={`This deployment deploys the Java backend written with MicroProfile.\n            This leverages the configmap considerably and is responsible for the communication between redis, MongoDB and the frontend. However, we will have to make two deployments of this to exemplify canary testing.\n            The first one will have the 'version: v1' label.`} />\n          <CodeSnip M text={\n`cat << EOF > backend_deploy1.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: backend-deploy\n    version: v1\n  name: backend-deploy\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend-deploy\n      version: v1\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      creationTimestamp: null\n      labels:\n        app: backend-deploy\n        version: v1\n        tier: backend\n    spec:\n      containers:\n      - env:\n        - name: DB_ADMINUSER\n          valueFrom:\n            secretKeyRef:\n              key: DB_ADMINUSER\n              name: void-secret\n        - name: DB_ADMINPWD\n          valueFrom:\n            secretKeyRef:\n              key: DB_ADMINPWD\n              name: void-secret\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              key: DB_HOST\n              name: void-config\n        - name: DB_PORT\n          valueFrom:\n            configMapKeyRef:\n              key: DB_PORT\n              name: void-config\n        - name: R_HOST\n          valueFrom:\n            configMapKeyRef:\n              key: R_HOST\n              name: void-config\n        - name: R_PORT\n          valueFrom:\n            configMapKeyRef:\n              key: R_PORT\n              name: void-config\n        image: dennismila/backend-void:1.2\n        imagePullPolicy: IfNotPresent\n        name: void-backend\n        ports:\n        - containerPort: 9080\n        resources:\n          requests:\n             cpu: 200m\nEOF\noc apply -f backend_deploy1.yaml`} />\n          <BodyText SM text={`The next will have version v2 and act as one of our \"canary\" test subjects as if it was a newer version when in reality, it is simply the same. It is nothing but a lie, shhh.`} />\n          <CodeSnip M text={\n`cat << EOF > backend_deploy2.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: backend-deploy\n    version: v2\n  name: backend-deploy-canary\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend-deploy\n      version: v2\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      labels:\n        app: backend-deploy\n        tier: backend\n        version: v2\n    spec:\n      containers:\n      - image: dennismila/backend-void:1.2\n        name: void-backend\n        ports:\n        - containerPort: 9080\n        env:\n        - name: DB_ADMINUSER\n          valueFrom:\n            secretKeyRef:\n              name: void-secret\n              key: DB_ADMINUSER\n        - name: DB_ADMINPWD\n          valueFrom:\n            secretKeyRef:\n              name: void-secret\n              key: DB_ADMINPWD\n        - name: DB_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: void-config\n              key: DB_HOST\n        - name: DB_PORT \n          valueFrom:\n            configMapKeyRef:\n              name: void-config\n              key: DB_PORT\n        - name: R_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: void-config\n              key: R_HOST\n        - name: R_PORT\n          valueFrom:\n            configMapKeyRef:\n              name: void-config\n              key: R_PORT\nEOF\noc apply -f backend_deploy2.yaml`} />\n          <BodyText SM text={`Now we'll need to add only one service as the istio routing rules and envoy proxies (sidecars), will handle the rest.`} />\n          <CodeSnip M text={\n`cat << EOF > backend_service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: backend-deploy\n  name: backend-service\nspec:\n  ports:\n  - port: 80\n    name: http\n    protocol: TCP\n    targetPort: 9080\n  selector:\n    app: backend-deploy\nEOF\noc apply -f backend_service.yaml`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Deploying the Frontend - ReactJS on Nginx\"/>\n          <BodyText SM text={`This, faithful readers, is the final deployment necessary. This one will also have \"two\" versions for canary testing with the weights specified back in the virtual services.\n            Without further ado, let's go ahead and deploy them!`} />\n          <CodeSnip M text={\n`cat << EOF > frontend_deploy1.yaml\nkind: DeploymentConfig\napiVersion: apps.openshift.io/v1\nmetadata:\n  name: frontend-deploy\n  labels:\n    app: frontend-deploy\n    version: v1\nspec:\n  strategy:\n    type: Rolling\n    rollingParams:\n      updatePeriodSeconds: 1\n      intervalSeconds: 1\n      timeoutSeconds: 600\n      maxUnavailable: 25%\n      maxSurge: 25%\n    resources: {}\n    activeDeadlineSeconds: 21600\n  triggers:\n    - type: ConfigChange\n  replicas: 1\n  selector:\n    app: frontend-deploy\n    version: v1\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      labels:\n        app: frontend-deploy\n        version: v1\n    spec:\n      containers:\n        - name: void-frontend\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            requests:\n             cpu: 125m\n          env:\n            - name: BACKEND_URL\n              valueFrom:\n                configMapKeyRef:\n                  key: BACKEND_URL\n                  name: void-config\n          securityContext:\n            capabilities:\n            privileged: true\n            readOnlyRootFilesystem: false\n            allowPrivilegeEscalation: true\n          imagePullPolicy: Always\n          terminationMessagePolicy: File\n          image: carnsds/frontend-void:1.3\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      dnsPolicy: ClusterFirst\n      serviceAccountName: general\n      serviceAccount: general\nEOF\noc apply -f frontend_deploy1.yaml`} />\n        <BodyText SM text=\"And for version two:\" />\n        <CodeSnip M text={\n`cat << EOF > frontend_deploy2.yaml\nkind: DeploymentConfig\napiVersion: apps.openshift.io/v1\nmetadata:\n  name: frontend-deploy-canary\n  labels:\n    app: frontend-deploy\n    version: v2\nspec:\n  strategy:\n    type: Rolling\n    rollingParams:\n      updatePeriodSeconds: 1\n      intervalSeconds: 1\n      timeoutSeconds: 600\n      maxUnavailable: 25%\n      maxSurge: 25%\n    resources: {}\n    activeDeadlineSeconds: 21600\n  triggers:\n    - type: ConfigChange\n  replicas: 1\n  selector:\n    app: frontend-deploy\n    version: v2\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: \"true\"\n      labels:\n        app: frontend-deploy\n        version: v2\n    spec:\n      containers:\n        - name: void-frontend\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            requests:\n             cpu: 125m\n          env:\n            - name: BACKEND_URL\n              valueFrom:\n                configMapKeyRef:\n                  key: BACKEND_URL\n                  name: void-config\n          securityContext:\n            capabilities:\n            privileged: true\n            readOnlyRootFilesystem: false\n            allowPrivilegeEscalation: true\n          imagePullPolicy: Always\n          terminationMessagePolicy: File\n          image: carnsds/frontend-void:1.3\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      dnsPolicy: ClusterFirst\n      serviceAccountName: general\n      serviceAccount: general\nEOF\noc apply -f frontend_deploy2.yaml`} />\n        <BodyText SM text={`Note the name of the following service's port, a name is necessary for proper istio configuration and we only named the backend and frontend ports, but you could definitely play around with other names.\n          Now, the final service to top it off:`} />\n        <CodeSnip M text={\n`cat << EOF > frontend_service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: frontend-deploy\n    service: frontend-service\n  name: frontend-service\nspec:\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: frontend-deploy\n  type: ClusterIP\nEOF\noc apply -f frontend_service.yaml`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Now to see that the application is running!\" />\n          <BodyText SM text=\"Run the following command and grab the istio-ingressgate-way route to checkout your newly deployed app in the browser!\" />\n          <CodeSnip text={`oc get route -n $MESH_PROJ`} />\n          <Image path={IMG1} text=\"how to grab the right ingress route\" />\n          <BodyText SM text=\"Copy that text and navigate there in the browser, alternatively you can grab the route within the cluster in the mesh project.\" />\n          <Image path={IMG2} text=\"Working App proof.\" />\n          <BodyText B SM text=\"If you see similar to the above and are able to create and account and mess around, then congratulate yourself, you've got it working properly!\" />\n          <BodyText SM text=\"Also if you want to check and see if it's setup properly without going into the browser you can run the following command and just check that each running pod has 2 containers. This would indicate that the istio sidecar injection (envoy proxy) was successful.\" />\n          <CodeSnip text=\"oc get pods\"/>\n          <Image path={IMG3} text=\"Proof 2 of working application.\" />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Summary\" />\n          <BodyText SM text={`In this step, we've deployed our application and added istio injection annotations to each Pod in our DeploymentConfigs and Deployments and also added services to expose them internally in the cluster.\n            Because of the virtual services we setup, our ingress gateway know's which envoy proxies (istio sidecars) on the pods to direct traffic to and we can officially start taking a look at that traffic data in the next section.\n            ** Note: There is a reason we used Deployments for one and DeploymentConfigs for the different services that we will run into later.` } />\n        </ListItem>\n      </UnorderedList>  \n  </Content>\n);\nexport default FourthPage;\n"]},"metadata":{},"sourceType":"module"}