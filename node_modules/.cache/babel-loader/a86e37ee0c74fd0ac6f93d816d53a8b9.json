{"ast":null,"code":"import React from\"react\";import{Content}from\"carbon-components-react/lib/components/UIShell\";import Header from\"../header/BasicHeader\";import Image from'../util/Image';import CodeSnip from'../util/CustomCodeSnip';import{UnorderedList,ListItem}from\"carbon-components-react\";import BodyText from'../text/BodyText';// == ASSETTS ==\nimport IMG1 from'../../assets/pg3-1.png';var ThirdPage=function ThirdPage(){return/*#__PURE__*/React.createElement(Content,null,/*#__PURE__*/React.createElement(Header,{text:\"Configuration\"}),/*#__PURE__*/React.createElement(UnorderedList,null,/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"First, let us ensure that the setup went swimmingly.\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Navigate to in developer mode to your <initials>-istio-system project and checkout the topology. If you see similar to the image below, you are good to go! Otherwise, repeat setup.\"}),/*#__PURE__*/React.createElement(Image,{path:IMG1,text:\"Service Mesh completed setup\"}),/*#__PURE__*/React.createElement(BodyText,{B:true,SM:true,text:\"** Please ensure the $APP_PROJ and $MESH_PROJ environment variables are still set before proceeding! **\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"echo $APP_PROJ\\necho $MESH_PROJ\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Next, let's create some files for the application to use and some files to leverage the service mesh\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Let's switch to our <initials>-application project using the CLI\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:\"oc project $APP_PROJ\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Service Account Configuration\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"We'll start with the service account needed for some of these deployments to overcome ocp permission errors, like nginx.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF>serviceaccount.yaml\\napiVersion: v1 \\nkind: ServiceAccount \\nmetadata:\\n  name: general \\nEOF\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Next we'll apply the yaml and give the account some permissions with the three following commands.\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:'oc apply -f serviceaccount.yaml'}),/*#__PURE__*/React.createElement(CodeSnip,{text:'oc adm policy add-scc-to-user anyuid -z general -n $APP_PROJ'}),/*#__PURE__*/React.createElement(CodeSnip,{text:'oc adm policy add-scc-to-user privileged -z general -n $APP_PROJ'}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Technically the privileged role should provide all the access required, but for some reason the mongo and redis images sometimes acted up when running with it, so I added the anyuid and it fixed it.\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Application Housekeeping\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Now, we will make a configmap and secret for some values for our application to utilize.\"}),/*#__PURE__*/React.createElement(CodeSnip,{text:'oc create secret generic void-secret --from-literal DB_ADMINPWD=admin --from-literal DB_ADMINUSER=admin'}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"The above line creates a secret for us and the below will create the configmap needed for our application environment variables. Now we'll grab the URL of our istio ingress gateway before creating our config map.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"export GATEWAY=\\\"http://$(oc get route -n $MESH_PROJ istio-ingressgateway -o jsonpath='{.spec.host}')\\\"\\ncat << EOF>configmap.yaml\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: void-config\\ndata:\\n  BACKEND_URL: $GATEWAY\\n  DB_HOST: mongo-service\\n  DB_PORT: \\\"8081\\\"\\n  R_HOST: redis-service\\n  R_PORT: \\\"6379\\\"\\nEOF\\noc apply -f configmap.yaml\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"The configmap creates 4 variables and ports for our application to refer to.\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Istio Configuration - Virtual Services\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Now that we have the application housekeeping out of the way, we can add some configuration for istio to route and analyze traffic to our application. First, we will setup our Virtual Services.\"+\"Simply put, these act as the routing rules. Very similar to HAproxy configuration or other load balancer rules. \"+\"You also define the weights and possibly some other rules for canary testing. You can see I've put a 80/20 split on the frontend services (that we will deploy in next section) and a 90/10 on the backend.\"+\" I also specifed a virtual service that would make it so that all Firefox users would be directed to the v2 version of the frontend. Note: you can see in the selector istio key, we are using the default ingressgateway of the mesh.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > istio_networking.yaml\\napiVersion: networking.istio.io/v1alpha3\\nkind: Gateway\\nmetadata:\\n  name: thevoid-gateway\\nspec:\\n  selector:\\n    istio: ingressgateway # use istio default controller\\n  servers:\\n  - port:\\n      number: 80\\n      name: http\\n      protocol: HTTP\\n    hosts:\\n    - \\\"*\\\"\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: VirtualService\\nmetadata:\\n  name: thevoid-vs\\nspec:\\n  hosts:\\n  - \\\"*\\\"\\n  gateways:\\n  - thevoid-gateway\\n  http:\\n  - match:\\n    - uri:\\n        prefix: /static\\n    - uri:\\n        prefix: /sockjs-node\\n    - uri:\\n        exact: /\\n    route:\\n    - destination:\\n        host: frontend-service\\n        subset: v1\\n        port:\\n          number: 80\\n      weight: 80\\n    - destination:\\n        host: frontend-service\\n        subset: v2\\n        port:\\n          number: 80\\n      weight: 20\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: VirtualService\\nmetadata:\\n  name: thevoid-be-vs\\nspec:\\n  hosts:\\n  - \\\"*\\\"\\n  gateways:\\n  - thevoid-gateway\\n  http:\\n  - match:\\n    - uri:\\n        prefix: /User\\n    - uri:\\n        prefix: /Article\\n    route:\\n    - destination:\\n        host: backend-service\\n        subset: v1\\n        port:\\n          number: 80\\n      weight: 90\\n    - destination:\\n        host: backend-service\\n        subset: v2\\n        port:\\n          number: 80\\n      weight: 10\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: VirtualService\\nmetadata:\\n  name: thevoid-be\\nspec:\\n  hosts:\\n  - \\\"*\\\"\\n  gateways:\\n  - thevoid-gateway\\n  http:\\n  - match:\\n    - uri:\\n        exact: /Calc\\n    rewrite:\\n        uri: /\\n    route:\\n    - destination:\\n        host: backend-service\\n        subset: v1\\n        port:\\n          number: 80\\n      weight: 90\\n    - destination:\\n        host: backend-service\\n        subset: v2\\n        port:\\n          number: 80\\n      weight: 10\\n---\\nEOF\\noc apply -f istio_networking.yaml\\n\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Istio Configuration - Destination Rules\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Next we will apply some destination rules for the routing, this is necessary for canary testing and further details how the communication \"+\"in the mesh works. For instance, adding mutual TLS on the services as seen in some of the rules.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > destination_rules.yaml\\napiVersion: networking.istio.io/v1alpha3\\nkind: DestinationRule\\nmetadata:\\n    name: backend-service\\nspec:\\n    host: backend-service\\n    subsets:\\n    - name: v1\\n      labels:\\n        version: v1\\n    - name: v2\\n      labels:\\n        version: v2\\n    trafficPolicy:\\n      tls:\\n        mode: ISTIO_MUTUAL\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: DestinationRule\\nmetadata:\\n    name: frontend-service\\nspec:\\n    host: frontend-service\\n    subsets:\\n    - name: v1\\n      labels:\\n        version: v1\\n    - name: v2\\n      labels:\\n        version: v2\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: DestinationRule\\nmetadata:\\n    name: mongo-service\\nspec:\\n    host: mongo-service\\n    subsets:\\n    - name: v1\\n    labels:\\n        version: v1\\n    trafficPolicy:\\n      tls:\\n        mode: ISTIO_MUTUAL\\n---\\napiVersion: networking.istio.io/v1alpha3\\nkind: DestinationRule\\nmetadata:\\n    name: redis-service\\nspec:\\n    host: redis-service\\n    subsets:\\n    - name: v1\\n    labels:\\n        version: v1\\n    trafficPolicy:\\n      tls:\\n        mode: ISTIO_MUTUAL\\nEOF\\noc apply -f destination_rules.yaml\\n\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Istio Configuration - Adding Prometheus Metrics\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"We will leverage Prometheus to query for the number of requests to the frontend and backend services.\"+\"You can then, visualize these as traffic is generated with Grafana or Kiali (which just shows the grafana data).\"+\"Each service requires it's own metric (instance) resource as well as a rule. However, the rules can reference the same handler resource for prometheus \"+\"to handle the rule execution as depicted in the spec.actions.handler of the rule yaml below. \"+\"Note: The metrics are applied to the application project, while the rule and prometheus resources are applied to the mesh project.\"}),/*#__PURE__*/React.createElement(CodeSnip,{M:true,text:\"cat << EOF > metrics.yaml\\napiVersion: \\\"config.istio.io/v1alpha2\\\"\\nkind: instance\\nmetadata:\\n  name: requestcount-fe\\nspec:\\n  compiledTemplate: metric\\n  params:\\n    value: \\\"1\\\"\\n    dimensions:\\n      source: source.service | \\\"unknown\\\"\\n      destination: destination.service | \\\"unknown\\\"\\n      version: destination.labels[\\\"version\\\"] | \\\"unknown\\\"\\n      user_agent: request.headers[\\\"user-agent\\\"] | \\\"unknown\\\"\\n    monitored_resource_type: '\\\"UNSPECIFIED\\\"'\\n---\\napiVersion: \\\"config.istio.io/v1alpha2\\\"\\nkind: instance\\nmetadata:\\n  name: requestcount-be\\nspec:\\n  compiledTemplate: metric\\n  params:\\n    value: \\\"1\\\"\\n    dimensions:\\n      source: source.service | \\\"unknown\\\"\\n      destination: destination.service | \\\"unknown\\\"\\n      version: destination.labels[\\\"version\\\"] | \\\"unknown\\\"\\n      user_agent: request.headers[\\\"user-agent\\\"] | \\\"unknown\\\"\\n    monitored_resource_type: '\\\"UNSPECIFIED\\\"'\\n---\\napiVersion: \\\"config.istio.io/v1alpha2\\\"\\nkind: handler\\nmetadata:\\n  name: recommendationrequestcounthandler\\n  namespace: $MESH_PROJ\\nspec:\\n  compiledAdapter: prometheus\\n  params:\\n    metrics:\\n    - name: recommendation_request_count\\n      instance_name: recommendationrequestcount.metric.$MESH_PROJ\\n      kind: COUNTER\\n      label_names:\\n      - source\\n      - destination\\n      - user_agent\\n      - version\\n---\\napiVersion: \\\"config.istio.io/v1alpha2\\\"\\nkind: rule\\nmetadata:\\n  name: recommendationrequestcountprom\\n  namespace: $MESH_PROJ\\nspec:\\n  match: destination.service == \\\"frontend-service.$APP_PROJ.svc.cluster.local\\\"\\n  actions:\\n  - handler: recommendationrequestcounthandler.prometheus\\n    instances:\\n    - requestcount-fe.metric\\n---\\napiVersion: \\\"config.istio.io/v1alpha2\\\"\\nkind: rule\\nmetadata:\\n  name: recommendationrequestcount-backend\\n  namespace: $MESH_PROJ\\nspec:\\n  match: destination.service == \\\"backend-service.$APP_PROJ.svc.cluster.local\\\"\\n  actions:\\n  - handler: recommendationrequestcounthandler.prometheus\\n    instances:\\n    - requestcount-be.metric\\nEOF\\noc apply -f metrics.yaml\"})),/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(BodyText,{text:\"Summary\"}),/*#__PURE__*/React.createElement(BodyText,{SM:true,text:\"Well done for making it this far! Istio is configured and ready for our application! \"+\"We first started with some housekeeping and adding some values to be used for our application, basic kubernetes stuff. \"+\"Then we added a gateway and some virtual services in order to control traffic into our ingress gateway, much like that of a load balancer. \"+\"Next the configuration of destination rules were made in order to specify traffic subsets and policy with mutual tls, which allows for service to service authentication without having to really do much on our part, nifty! \"+\"Finally, we laid the foundation of the prometheus derived metrics and rules for futre analysis of traffic into our application.\"}))));};export default ThirdPage;","map":{"version":3,"sources":["/Users/dilloncarns/Projects/redhatservicemeshtutorial/src/components/pages/ThirdPage.js"],"names":["React","Content","Header","Image","CodeSnip","UnorderedList","ListItem","BodyText","IMG1","ThirdPage"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Content } from \"carbon-components-react/lib/components/UIShell\";\nimport Header from \"../header/BasicHeader\";\nimport Image from '../util/Image';\nimport CodeSnip from '../util/CustomCodeSnip';\nimport { UnorderedList, ListItem } from \"carbon-components-react\";\nimport BodyText from '../text/BodyText';\n\n// == ASSETTS ==\nimport IMG1 from '../../assets/pg3-1.png';\n\nconst ThirdPage = () => (\n  <Content>\n      <Header text=\"Configuration\"/>\n      <UnorderedList>\n        <ListItem>\n          <BodyText text='First, let us ensure that the setup went swimmingly.' />\n          <BodyText SM text='Navigate to in developer mode to your <initials>-istio-system project and checkout the topology. If you see similar to the image below, you are good to go! Otherwise, repeat setup.' />\n          <Image path={IMG1} text='Service Mesh completed setup' />\n          <BodyText B SM text={`** Please ensure the $APP_PROJ and $MESH_PROJ environment variables are still set before proceeding! **`} />\n          <CodeSnip M text={\n`echo $APP_PROJ\necho $MESH_PROJ`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Next, let's create some files for the application to use and some files to leverage the service mesh\" />\n          <BodyText SM text=\"Let's switch to our <initials>-application project using the CLI\" />\n          <CodeSnip text=\"oc project $APP_PROJ\" />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Service Account Configuration\" />\n          <BodyText SM text=\"We'll start with the service account needed for some of these deployments to overcome ocp permission errors, like nginx.\" />\n          <CodeSnip M text={\n`cat << EOF>serviceaccount.yaml\napiVersion: v1 \nkind: ServiceAccount \nmetadata:\n  name: general \nEOF`} />\n          <BodyText SM text=\"Next we'll apply the yaml and give the account some permissions with the three following commands.\" />\n          <CodeSnip text={'oc apply -f serviceaccount.yaml'} />\n          <CodeSnip text={'oc adm policy add-scc-to-user anyuid -z general -n $APP_PROJ'} />\n          <CodeSnip text={'oc adm policy add-scc-to-user privileged -z general -n $APP_PROJ'} />\n          <BodyText SM text=\"Technically the privileged role should provide all the access required, but for some reason the mongo and redis images sometimes acted up when running with it, so I added the anyuid and it fixed it.\" />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Application Housekeeping\" />\n          <BodyText SM text=\"Now, we will make a configmap and secret for some values for our application to utilize.\" />\n          <CodeSnip text={'oc create secret generic void-secret --from-literal DB_ADMINPWD=admin --from-literal DB_ADMINUSER=admin'} />\n          <BodyText SM text=\"The above line creates a secret for us and the below will create the configmap needed for our application environment variables. Now we'll grab the URL of our istio ingress gateway before creating our config map.\"/>\n          <CodeSnip M text={\n`export GATEWAY=\"http://$(oc get route -n $MESH_PROJ istio-ingressgateway -o jsonpath='{.spec.host}')\"\ncat << EOF>configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: void-config\ndata:\n  BACKEND_URL: $GATEWAY\n  DB_HOST: mongo-service\n  DB_PORT: \"8081\"\n  R_HOST: redis-service\n  R_PORT: \"6379\"\nEOF\noc apply -f configmap.yaml`} />\n          <BodyText SM text=\"The configmap creates 4 variables and ports for our application to refer to.\"/>\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Istio Configuration - Virtual Services\" />\n          <BodyText SM text={\"Now that we have the application housekeeping out of the way, we can add some configuration for istio to route and analyze traffic to our application. First, we will setup our Virtual Services.\" \n          + \"Simply put, these act as the routing rules. Very similar to HAproxy configuration or other load balancer rules. \" \n          + \"You also define the weights and possibly some other rules for canary testing. You can see I've put a 80/20 split on the frontend services (that we will deploy in next section) and a 90/10 on the backend.\"\n          + \" I also specifed a virtual service that would make it so that all Firefox users would be directed to the v2 version of the frontend. Note: you can see in the selector istio key, we are using the default ingressgateway of the mesh.\"}/>\n          <CodeSnip M text={\n`cat << EOF > istio_networking.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: thevoid-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: thevoid-vs\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - thevoid-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /static\n    - uri:\n        prefix: /sockjs-node\n    - uri:\n        exact: /\n    route:\n    - destination:\n        host: frontend-service\n        subset: v1\n        port:\n          number: 80\n      weight: 80\n    - destination:\n        host: frontend-service\n        subset: v2\n        port:\n          number: 80\n      weight: 20\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: thevoid-be-vs\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - thevoid-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /User\n    - uri:\n        prefix: /Article\n    route:\n    - destination:\n        host: backend-service\n        subset: v1\n        port:\n          number: 80\n      weight: 90\n    - destination:\n        host: backend-service\n        subset: v2\n        port:\n          number: 80\n      weight: 10\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: thevoid-be\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - thevoid-gateway\n  http:\n  - match:\n    - uri:\n        exact: /Calc\n    rewrite:\n        uri: /\n    route:\n    - destination:\n        host: backend-service\n        subset: v1\n        port:\n          number: 80\n      weight: 90\n    - destination:\n        host: backend-service\n        subset: v2\n        port:\n          number: 80\n      weight: 10\n---\nEOF\noc apply -f istio_networking.yaml\n`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Istio Configuration - Destination Rules\" />\n          <BodyText SM text={\"Next we will apply some destination rules for the routing, this is necessary for canary testing and further details how the communication \" \n            + \"in the mesh works. For instance, adding mutual TLS on the services as seen in some of the rules.\" }/>\n          <CodeSnip M text={\n`cat << EOF > destination_rules.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n    name: backend-service\nspec:\n    host: backend-service\n    subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2\n    trafficPolicy:\n      tls:\n        mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n    name: frontend-service\nspec:\n    host: frontend-service\n    subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n    name: mongo-service\nspec:\n    host: mongo-service\n    subsets:\n    - name: v1\n    labels:\n        version: v1\n    trafficPolicy:\n      tls:\n        mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n    name: redis-service\nspec:\n    host: redis-service\n    subsets:\n    - name: v1\n    labels:\n        version: v1\n    trafficPolicy:\n      tls:\n        mode: ISTIO_MUTUAL\nEOF\noc apply -f destination_rules.yaml\n`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Istio Configuration - Adding Prometheus Metrics\" />\n          <BodyText SM text={\"We will leverage Prometheus to query for the number of requests to the frontend and backend services.\" \n            + \"You can then, visualize these as traffic is generated with Grafana or Kiali (which just shows the grafana data).\"\n            + \"Each service requires it's own metric (instance) resource as well as a rule. However, the rules can reference the same handler resource for prometheus \" \n            + \"to handle the rule execution as depicted in the spec.actions.handler of the rule yaml below. \"\n            + \"Note: The metrics are applied to the application project, while the rule and prometheus resources are applied to the mesh project.\" } />\n          <CodeSnip M text={\n`cat << EOF > metrics.yaml\napiVersion: \"config.istio.io/v1alpha2\"\nkind: instance\nmetadata:\n  name: requestcount-fe\nspec:\n  compiledTemplate: metric\n  params:\n    value: \"1\"\n    dimensions:\n      source: source.service | \"unknown\"\n      destination: destination.service | \"unknown\"\n      version: destination.labels[\"version\"] | \"unknown\"\n      user_agent: request.headers[\"user-agent\"] | \"unknown\"\n    monitored_resource_type: '\"UNSPECIFIED\"'\n---\napiVersion: \"config.istio.io/v1alpha2\"\nkind: instance\nmetadata:\n  name: requestcount-be\nspec:\n  compiledTemplate: metric\n  params:\n    value: \"1\"\n    dimensions:\n      source: source.service | \"unknown\"\n      destination: destination.service | \"unknown\"\n      version: destination.labels[\"version\"] | \"unknown\"\n      user_agent: request.headers[\"user-agent\"] | \"unknown\"\n    monitored_resource_type: '\"UNSPECIFIED\"'\n---\napiVersion: \"config.istio.io/v1alpha2\"\nkind: handler\nmetadata:\n  name: recommendationrequestcounthandler\n  namespace: $MESH_PROJ\nspec:\n  compiledAdapter: prometheus\n  params:\n    metrics:\n    - name: recommendation_request_count\n      instance_name: recommendationrequestcount.metric.$MESH_PROJ\n      kind: COUNTER\n      label_names:\n      - source\n      - destination\n      - user_agent\n      - version\n---\napiVersion: \"config.istio.io/v1alpha2\"\nkind: rule\nmetadata:\n  name: recommendationrequestcountprom\n  namespace: $MESH_PROJ\nspec:\n  match: destination.service == \"frontend-service.$APP_PROJ.svc.cluster.local\"\n  actions:\n  - handler: recommendationrequestcounthandler.prometheus\n    instances:\n    - requestcount-fe.metric\n---\napiVersion: \"config.istio.io/v1alpha2\"\nkind: rule\nmetadata:\n  name: recommendationrequestcount-backend\n  namespace: $MESH_PROJ\nspec:\n  match: destination.service == \"backend-service.$APP_PROJ.svc.cluster.local\"\n  actions:\n  - handler: recommendationrequestcounthandler.prometheus\n    instances:\n    - requestcount-be.metric\nEOF\noc apply -f metrics.yaml`} />\n        </ListItem>\n        <ListItem>\n          <BodyText text=\"Summary\" />\n          <BodyText SM text={\"Well done for making it this far! Istio is configured and ready for our application! \" \n            + \"We first started with some housekeeping and adding some values to be used for our application, basic kubernetes stuff. \"\n            + \"Then we added a gateway and some virtual services in order to control traffic into our ingress gateway, much like that of a load balancer. \" \n            + \"Next the configuration of destination rules were made in order to specify traffic subsets and policy with mutual tls, which allows for service to service authentication without having to really do much on our part, nifty! \"\n            + \"Finally, we laid the foundation of the prometheus derived metrics and rules for futre analysis of traffic into our application.\"} />\n        </ListItem>\n      </UnorderedList>\n  </Content>\n);\nexport default ThirdPage;"]},"metadata":{},"sourceType":"module"}